// Code generated by Prisma (prisma@1.25.4). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  user: (where?: UserWhereInput) => Promise<boolean>;
  video: (where?: VideoWhereInput) => Promise<boolean>;
  view: (where?: ViewWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  video: (where: VideoWhereUniqueInput) => VideoPromise;
  videos: (args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Video>;
  videosConnection: (args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VideoConnectionPromise;
  view: (where: ViewWhereUniqueInput) => ViewPromise;
  views: (args?: {
    where?: ViewWhereInput;
    orderBy?: ViewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<View>;
  viewsConnection: (args?: {
    where?: ViewWhereInput;
    orderBy?: ViewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ViewConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVideo: (data: VideoCreateInput) => VideoPromise;
  updateVideo: (args: {
    data: VideoUpdateInput;
    where: VideoWhereUniqueInput;
  }) => VideoPromise;
  updateManyVideos: (args: {
    data: VideoUpdateManyMutationInput;
    where?: VideoWhereInput;
  }) => BatchPayloadPromise;
  upsertVideo: (args: {
    where: VideoWhereUniqueInput;
    create: VideoCreateInput;
    update: VideoUpdateInput;
  }) => VideoPromise;
  deleteVideo: (where: VideoWhereUniqueInput) => VideoPromise;
  deleteManyVideos: (where?: VideoWhereInput) => BatchPayloadPromise;
  createView: (data: ViewCreateInput) => ViewPromise;
  updateView: (args: {
    data: ViewUpdateInput;
    where: ViewWhereUniqueInput;
  }) => ViewPromise;
  upsertView: (args: {
    where: ViewWhereUniqueInput;
    create: ViewCreateInput;
    update: ViewUpdateInput;
  }) => ViewPromise;
  deleteView: (where: ViewWhereUniqueInput) => ViewPromise;
  deleteManyViews: (where?: ViewWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  video: (
    where?: VideoSubscriptionWhereInput
  ) => VideoSubscriptionPayloadSubscription;
  view: (
    where?: ViewSubscriptionWhereInput
  ) => ViewSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type Category =
  | "FILM_ANIMATION"
  | "AUTOS_VEHICLES"
  | "MUSIC"
  | "PETS_ANIMALS"
  | "SPORTS"
  | "TRAVEL_EVENTS"
  | "GAMING"
  | "PEOPLE_BLOGS"
  | "COMEDY"
  | "ENTERTAINMENT"
  | "NEWS_POLITICS"
  | "HOWTO_STYLE"
  | "EDUCATION"
  | "SCIENCE_TECHNOLOGY"
  | "NONPROFITS_ACTIVISM";

export type Role = "USER" | "ADMIN";

export type VideoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "videoURL_ASC"
  | "videoURL_DESC"
  | "thumbURL_ASC"
  | "thumbURL_DESC"
  | "posterURL_ASC"
  | "posterURL_DESC"
  | "previewURL_ASC"
  | "previewURL_DESC"
  | "duration_ASC"
  | "duration_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "isPublic_ASC"
  | "isPublic_DESC"
  | "category_ASC"
  | "category_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ViewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "googleID_ASC"
  | "googleID_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "image_ASC"
  | "image_DESC"
  | "googlePhotoAT_ASC"
  | "googlePhotoAT_DESC"
  | "googlePhotoRT_ASC"
  | "googlePhotoRT_DESC"
  | "role_ASC"
  | "role_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface VideoUpdatetagsInput {
  set?: String[] | String;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  googleID?: String;
  email?: String;
}>;

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface ViewWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  video?: VideoWhereInput;
  user?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: ViewWhereInput[] | ViewWhereInput;
  OR?: ViewWhereInput[] | ViewWhereInput;
  NOT?: ViewWhereInput[] | ViewWhereInput;
}

export interface ViewCreateManyWithoutVideoInput {
  create?: ViewCreateWithoutVideoInput[] | ViewCreateWithoutVideoInput;
  connect?: ViewWhereUniqueInput[] | ViewWhereUniqueInput;
}

export interface VideoCreateInput {
  videoURL: String;
  thumbURL?: String;
  posterURL?: String;
  previewURL?: String;
  duration?: Int;
  title: String;
  description?: String;
  tags?: VideoCreatetagsInput;
  isPublished?: Boolean;
  isPublic?: Boolean;
  category?: Category;
  views?: ViewCreateManyWithoutVideoInput;
  user?: UserCreateOneWithoutVideosInput;
}

export interface ViewCreateWithoutVideoInput {
  user?: UserCreateOneInput;
}

export interface UserUpdateDataInput {
  googleID?: String;
  email?: String;
  name?: String;
  image?: String;
  googlePhotoAT?: String;
  googlePhotoRT?: String;
  videos?: VideoUpdateManyWithoutUserInput;
  role?: Role;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface VideoSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: VideoWhereInput;
  AND?: VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput;
  OR?: VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput;
  NOT?: VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput;
}

export interface UserUpdateInput {
  googleID?: String;
  email?: String;
  name?: String;
  image?: String;
  googlePhotoAT?: String;
  googlePhotoRT?: String;
  videos?: VideoUpdateManyWithoutUserInput;
  role?: Role;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface VideoUpdateManyWithoutUserInput {
  create?: VideoCreateWithoutUserInput[] | VideoCreateWithoutUserInput;
  delete?: VideoWhereUniqueInput[] | VideoWhereUniqueInput;
  connect?: VideoWhereUniqueInput[] | VideoWhereUniqueInput;
  disconnect?: VideoWhereUniqueInput[] | VideoWhereUniqueInput;
  update?:
    | VideoUpdateWithWhereUniqueWithoutUserInput[]
    | VideoUpdateWithWhereUniqueWithoutUserInput;
  upsert?:
    | VideoUpsertWithWhereUniqueWithoutUserInput[]
    | VideoUpsertWithWhereUniqueWithoutUserInput;
  deleteMany?: VideoScalarWhereInput[] | VideoScalarWhereInput;
  updateMany?:
    | VideoUpdateManyWithWhereNestedInput[]
    | VideoUpdateManyWithWhereNestedInput;
}

export interface VideoUpdateWithoutViewsDataInput {
  videoURL?: String;
  thumbURL?: String;
  posterURL?: String;
  previewURL?: String;
  duration?: Int;
  title?: String;
  description?: String;
  tags?: VideoUpdatetagsInput;
  isPublished?: Boolean;
  isPublic?: Boolean;
  category?: Category;
  user?: UserUpdateOneWithoutVideosInput;
}

export interface VideoUpdateWithWhereUniqueWithoutUserInput {
  where: VideoWhereUniqueInput;
  data: VideoUpdateWithoutUserDataInput;
}

export interface ViewUpdateInput {
  video?: VideoUpdateOneWithoutViewsInput;
  user?: UserUpdateOneInput;
}

export interface VideoUpdateWithoutUserDataInput {
  videoURL?: String;
  thumbURL?: String;
  posterURL?: String;
  previewURL?: String;
  duration?: Int;
  title?: String;
  description?: String;
  tags?: VideoUpdatetagsInput;
  isPublished?: Boolean;
  isPublic?: Boolean;
  category?: Category;
  views?: ViewUpdateManyWithoutVideoInput;
}

export type VideoWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface VideoUpdateInput {
  videoURL?: String;
  thumbURL?: String;
  posterURL?: String;
  previewURL?: String;
  duration?: Int;
  title?: String;
  description?: String;
  tags?: VideoUpdatetagsInput;
  isPublished?: Boolean;
  isPublic?: Boolean;
  category?: Category;
  views?: ViewUpdateManyWithoutVideoInput;
  user?: UserUpdateOneWithoutVideosInput;
}

export interface ViewCreateInput {
  video?: VideoCreateOneWithoutViewsInput;
  user?: UserCreateOneInput;
}

export interface ViewUpdateManyWithoutVideoInput {
  create?: ViewCreateWithoutVideoInput[] | ViewCreateWithoutVideoInput;
  delete?: ViewWhereUniqueInput[] | ViewWhereUniqueInput;
  connect?: ViewWhereUniqueInput[] | ViewWhereUniqueInput;
  disconnect?: ViewWhereUniqueInput[] | ViewWhereUniqueInput;
  update?:
    | ViewUpdateWithWhereUniqueWithoutVideoInput[]
    | ViewUpdateWithWhereUniqueWithoutVideoInput;
  upsert?:
    | ViewUpsertWithWhereUniqueWithoutVideoInput[]
    | ViewUpsertWithWhereUniqueWithoutVideoInput;
  deleteMany?: ViewScalarWhereInput[] | ViewScalarWhereInput;
}

export type ViewWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface ViewUpdateWithWhereUniqueWithoutVideoInput {
  where: ViewWhereUniqueInput;
  data: ViewUpdateWithoutVideoDataInput;
}

export interface UserUpdateWithoutVideosDataInput {
  googleID?: String;
  email?: String;
  name?: String;
  image?: String;
  googlePhotoAT?: String;
  googlePhotoRT?: String;
  role?: Role;
}

export interface ViewUpdateWithoutVideoDataInput {
  user?: UserUpdateOneInput;
}

export interface VideoCreateManyWithoutUserInput {
  create?: VideoCreateWithoutUserInput[] | VideoCreateWithoutUserInput;
  connect?: VideoWhereUniqueInput[] | VideoWhereUniqueInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  googleID?: String;
  googleID_not?: String;
  googleID_in?: String[] | String;
  googleID_not_in?: String[] | String;
  googleID_lt?: String;
  googleID_lte?: String;
  googleID_gt?: String;
  googleID_gte?: String;
  googleID_contains?: String;
  googleID_not_contains?: String;
  googleID_starts_with?: String;
  googleID_not_starts_with?: String;
  googleID_ends_with?: String;
  googleID_not_ends_with?: String;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  image?: String;
  image_not?: String;
  image_in?: String[] | String;
  image_not_in?: String[] | String;
  image_lt?: String;
  image_lte?: String;
  image_gt?: String;
  image_gte?: String;
  image_contains?: String;
  image_not_contains?: String;
  image_starts_with?: String;
  image_not_starts_with?: String;
  image_ends_with?: String;
  image_not_ends_with?: String;
  googlePhotoAT?: String;
  googlePhotoAT_not?: String;
  googlePhotoAT_in?: String[] | String;
  googlePhotoAT_not_in?: String[] | String;
  googlePhotoAT_lt?: String;
  googlePhotoAT_lte?: String;
  googlePhotoAT_gt?: String;
  googlePhotoAT_gte?: String;
  googlePhotoAT_contains?: String;
  googlePhotoAT_not_contains?: String;
  googlePhotoAT_starts_with?: String;
  googlePhotoAT_not_starts_with?: String;
  googlePhotoAT_ends_with?: String;
  googlePhotoAT_not_ends_with?: String;
  googlePhotoRT?: String;
  googlePhotoRT_not?: String;
  googlePhotoRT_in?: String[] | String;
  googlePhotoRT_not_in?: String[] | String;
  googlePhotoRT_lt?: String;
  googlePhotoRT_lte?: String;
  googlePhotoRT_gt?: String;
  googlePhotoRT_gte?: String;
  googlePhotoRT_contains?: String;
  googlePhotoRT_not_contains?: String;
  googlePhotoRT_starts_with?: String;
  googlePhotoRT_not_starts_with?: String;
  googlePhotoRT_ends_with?: String;
  googlePhotoRT_not_ends_with?: String;
  videos_every?: VideoWhereInput;
  videos_some?: VideoWhereInput;
  videos_none?: VideoWhereInput;
  role?: Role;
  role_not?: Role;
  role_in?: Role[] | Role;
  role_not_in?: Role[] | Role;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface VideoCreatetagsInput {
  set?: String[] | String;
}

export interface UserCreateWithoutVideosInput {
  googleID: String;
  email: String;
  name: String;
  image: String;
  googlePhotoAT?: String;
  googlePhotoRT?: String;
  role: Role;
}

export interface VideoWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  videoURL?: String;
  videoURL_not?: String;
  videoURL_in?: String[] | String;
  videoURL_not_in?: String[] | String;
  videoURL_lt?: String;
  videoURL_lte?: String;
  videoURL_gt?: String;
  videoURL_gte?: String;
  videoURL_contains?: String;
  videoURL_not_contains?: String;
  videoURL_starts_with?: String;
  videoURL_not_starts_with?: String;
  videoURL_ends_with?: String;
  videoURL_not_ends_with?: String;
  thumbURL?: String;
  thumbURL_not?: String;
  thumbURL_in?: String[] | String;
  thumbURL_not_in?: String[] | String;
  thumbURL_lt?: String;
  thumbURL_lte?: String;
  thumbURL_gt?: String;
  thumbURL_gte?: String;
  thumbURL_contains?: String;
  thumbURL_not_contains?: String;
  thumbURL_starts_with?: String;
  thumbURL_not_starts_with?: String;
  thumbURL_ends_with?: String;
  thumbURL_not_ends_with?: String;
  posterURL?: String;
  posterURL_not?: String;
  posterURL_in?: String[] | String;
  posterURL_not_in?: String[] | String;
  posterURL_lt?: String;
  posterURL_lte?: String;
  posterURL_gt?: String;
  posterURL_gte?: String;
  posterURL_contains?: String;
  posterURL_not_contains?: String;
  posterURL_starts_with?: String;
  posterURL_not_starts_with?: String;
  posterURL_ends_with?: String;
  posterURL_not_ends_with?: String;
  previewURL?: String;
  previewURL_not?: String;
  previewURL_in?: String[] | String;
  previewURL_not_in?: String[] | String;
  previewURL_lt?: String;
  previewURL_lte?: String;
  previewURL_gt?: String;
  previewURL_gte?: String;
  previewURL_contains?: String;
  previewURL_not_contains?: String;
  previewURL_starts_with?: String;
  previewURL_not_starts_with?: String;
  previewURL_ends_with?: String;
  previewURL_not_ends_with?: String;
  duration?: Int;
  duration_not?: Int;
  duration_in?: Int[] | Int;
  duration_not_in?: Int[] | Int;
  duration_lt?: Int;
  duration_lte?: Int;
  duration_gt?: Int;
  duration_gte?: Int;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  isPublished?: Boolean;
  isPublished_not?: Boolean;
  isPublic?: Boolean;
  isPublic_not?: Boolean;
  category?: Category;
  category_not?: Category;
  category_in?: Category[] | Category;
  category_not_in?: Category[] | Category;
  views_every?: ViewWhereInput;
  views_some?: ViewWhereInput;
  views_none?: ViewWhereInput;
  user?: UserWhereInput;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: VideoWhereInput[] | VideoWhereInput;
  OR?: VideoWhereInput[] | VideoWhereInput;
  NOT?: VideoWhereInput[] | VideoWhereInput;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface VideoUpdateOneWithoutViewsInput {
  create?: VideoCreateWithoutViewsInput;
  update?: VideoUpdateWithoutViewsDataInput;
  upsert?: VideoUpsertWithoutViewsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: VideoWhereUniqueInput;
}

export interface ViewUpsertWithWhereUniqueWithoutVideoInput {
  where: ViewWhereUniqueInput;
  update: ViewUpdateWithoutVideoDataInput;
  create: ViewCreateWithoutVideoInput;
}

export interface VideoCreateOneWithoutViewsInput {
  create?: VideoCreateWithoutViewsInput;
  connect?: VideoWhereUniqueInput;
}

export interface ViewScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: ViewScalarWhereInput[] | ViewScalarWhereInput;
  OR?: ViewScalarWhereInput[] | ViewScalarWhereInput;
  NOT?: ViewScalarWhereInput[] | ViewScalarWhereInput;
}

export interface UserUpsertWithoutVideosInput {
  update: UserUpdateWithoutVideosDataInput;
  create: UserCreateWithoutVideosInput;
}

export interface VideoUpsertWithWhereUniqueWithoutUserInput {
  where: VideoWhereUniqueInput;
  update: VideoUpdateWithoutUserDataInput;
  create: VideoCreateWithoutUserInput;
}

export interface UserCreateInput {
  googleID: String;
  email: String;
  name: String;
  image: String;
  googlePhotoAT?: String;
  googlePhotoRT?: String;
  videos?: VideoCreateManyWithoutUserInput;
  role: Role;
}

export interface VideoScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  videoURL?: String;
  videoURL_not?: String;
  videoURL_in?: String[] | String;
  videoURL_not_in?: String[] | String;
  videoURL_lt?: String;
  videoURL_lte?: String;
  videoURL_gt?: String;
  videoURL_gte?: String;
  videoURL_contains?: String;
  videoURL_not_contains?: String;
  videoURL_starts_with?: String;
  videoURL_not_starts_with?: String;
  videoURL_ends_with?: String;
  videoURL_not_ends_with?: String;
  thumbURL?: String;
  thumbURL_not?: String;
  thumbURL_in?: String[] | String;
  thumbURL_not_in?: String[] | String;
  thumbURL_lt?: String;
  thumbURL_lte?: String;
  thumbURL_gt?: String;
  thumbURL_gte?: String;
  thumbURL_contains?: String;
  thumbURL_not_contains?: String;
  thumbURL_starts_with?: String;
  thumbURL_not_starts_with?: String;
  thumbURL_ends_with?: String;
  thumbURL_not_ends_with?: String;
  posterURL?: String;
  posterURL_not?: String;
  posterURL_in?: String[] | String;
  posterURL_not_in?: String[] | String;
  posterURL_lt?: String;
  posterURL_lte?: String;
  posterURL_gt?: String;
  posterURL_gte?: String;
  posterURL_contains?: String;
  posterURL_not_contains?: String;
  posterURL_starts_with?: String;
  posterURL_not_starts_with?: String;
  posterURL_ends_with?: String;
  posterURL_not_ends_with?: String;
  previewURL?: String;
  previewURL_not?: String;
  previewURL_in?: String[] | String;
  previewURL_not_in?: String[] | String;
  previewURL_lt?: String;
  previewURL_lte?: String;
  previewURL_gt?: String;
  previewURL_gte?: String;
  previewURL_contains?: String;
  previewURL_not_contains?: String;
  previewURL_starts_with?: String;
  previewURL_not_starts_with?: String;
  previewURL_ends_with?: String;
  previewURL_not_ends_with?: String;
  duration?: Int;
  duration_not?: Int;
  duration_in?: Int[] | Int;
  duration_not_in?: Int[] | Int;
  duration_lt?: Int;
  duration_lte?: Int;
  duration_gt?: Int;
  duration_gte?: Int;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  description?: String;
  description_not?: String;
  description_in?: String[] | String;
  description_not_in?: String[] | String;
  description_lt?: String;
  description_lte?: String;
  description_gt?: String;
  description_gte?: String;
  description_contains?: String;
  description_not_contains?: String;
  description_starts_with?: String;
  description_not_starts_with?: String;
  description_ends_with?: String;
  description_not_ends_with?: String;
  isPublished?: Boolean;
  isPublished_not?: Boolean;
  isPublic?: Boolean;
  isPublic_not?: Boolean;
  category?: Category;
  category_not?: Category;
  category_in?: Category[] | Category;
  category_not_in?: Category[] | Category;
  createdAt?: DateTimeInput;
  createdAt_not?: DateTimeInput;
  createdAt_in?: DateTimeInput[] | DateTimeInput;
  createdAt_not_in?: DateTimeInput[] | DateTimeInput;
  createdAt_lt?: DateTimeInput;
  createdAt_lte?: DateTimeInput;
  createdAt_gt?: DateTimeInput;
  createdAt_gte?: DateTimeInput;
  AND?: VideoScalarWhereInput[] | VideoScalarWhereInput;
  OR?: VideoScalarWhereInput[] | VideoScalarWhereInput;
  NOT?: VideoScalarWhereInput[] | VideoScalarWhereInput;
}

export interface ViewSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: ViewWhereInput;
  AND?: ViewSubscriptionWhereInput[] | ViewSubscriptionWhereInput;
  OR?: ViewSubscriptionWhereInput[] | ViewSubscriptionWhereInput;
  NOT?: ViewSubscriptionWhereInput[] | ViewSubscriptionWhereInput;
}

export interface UserCreateOneWithoutVideosInput {
  create?: UserCreateWithoutVideosInput;
  connect?: UserWhereUniqueInput;
}

export interface UserUpdateManyMutationInput {
  googleID?: String;
  email?: String;
  name?: String;
  image?: String;
  googlePhotoAT?: String;
  googlePhotoRT?: String;
  role?: Role;
}

export interface VideoUpdateManyDataInput {
  videoURL?: String;
  thumbURL?: String;
  posterURL?: String;
  previewURL?: String;
  duration?: Int;
  title?: String;
  description?: String;
  tags?: VideoUpdatetagsInput;
  isPublished?: Boolean;
  isPublic?: Boolean;
  category?: Category;
}

export interface VideoUpdateManyWithWhereNestedInput {
  where: VideoScalarWhereInput;
  data: VideoUpdateManyDataInput;
}

export interface VideoUpsertWithoutViewsInput {
  update: VideoUpdateWithoutViewsDataInput;
  create: VideoCreateWithoutViewsInput;
}

export interface VideoCreateWithoutUserInput {
  videoURL: String;
  thumbURL?: String;
  posterURL?: String;
  previewURL?: String;
  duration?: Int;
  title: String;
  description?: String;
  tags?: VideoCreatetagsInput;
  isPublished?: Boolean;
  isPublic?: Boolean;
  category?: Category;
  views?: ViewCreateManyWithoutVideoInput;
}

export interface UserUpdateOneWithoutVideosInput {
  create?: UserCreateWithoutVideosInput;
  update?: UserUpdateWithoutVideosDataInput;
  upsert?: UserUpsertWithoutVideosInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface VideoUpdateManyMutationInput {
  videoURL?: String;
  thumbURL?: String;
  posterURL?: String;
  previewURL?: String;
  duration?: Int;
  title?: String;
  description?: String;
  tags?: VideoUpdatetagsInput;
  isPublished?: Boolean;
  isPublic?: Boolean;
  category?: Category;
}

export interface VideoCreateWithoutViewsInput {
  videoURL: String;
  thumbURL?: String;
  posterURL?: String;
  previewURL?: String;
  duration?: Int;
  title: String;
  description?: String;
  tags?: VideoCreatetagsInput;
  isPublished?: Boolean;
  isPublic?: Boolean;
  category?: Category;
  user?: UserCreateOneWithoutVideosInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface ViewPreviousValues {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface ViewPreviousValuesPromise
  extends Promise<ViewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ViewPreviousValuesSubscription
  extends Promise<AsyncIterator<ViewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Video {
  id: ID_Output;
  videoURL: String;
  thumbURL?: String;
  posterURL?: String;
  previewURL?: String;
  duration?: Int;
  title: String;
  description?: String;
  tags: String[];
  isPublished: Boolean;
  isPublic: Boolean;
  category?: Category;
  createdAt: DateTimeOutput;
}

export interface VideoPromise extends Promise<Video>, Fragmentable {
  id: () => Promise<ID_Output>;
  videoURL: () => Promise<String>;
  thumbURL: () => Promise<String>;
  posterURL: () => Promise<String>;
  previewURL: () => Promise<String>;
  duration: () => Promise<Int>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  tags: () => Promise<String[]>;
  isPublished: () => Promise<Boolean>;
  isPublic: () => Promise<Boolean>;
  category: () => Promise<Category>;
  views: <T = FragmentableArray<View>>(args?: {
    where?: ViewWhereInput;
    orderBy?: ViewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface VideoSubscription
  extends Promise<AsyncIterator<Video>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  videoURL: () => Promise<AsyncIterator<String>>;
  thumbURL: () => Promise<AsyncIterator<String>>;
  posterURL: () => Promise<AsyncIterator<String>>;
  previewURL: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  category: () => Promise<AsyncIterator<Category>>;
  views: <T = Promise<AsyncIterator<ViewSubscription>>>(args?: {
    where?: ViewWhereInput;
    orderBy?: ViewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface VideoPreviousValues {
  id: ID_Output;
  videoURL: String;
  thumbURL?: String;
  posterURL?: String;
  previewURL?: String;
  duration?: Int;
  title: String;
  description?: String;
  tags: String[];
  isPublished: Boolean;
  isPublic: Boolean;
  category?: Category;
  createdAt: DateTimeOutput;
}

export interface VideoPreviousValuesPromise
  extends Promise<VideoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  videoURL: () => Promise<String>;
  thumbURL: () => Promise<String>;
  posterURL: () => Promise<String>;
  previewURL: () => Promise<String>;
  duration: () => Promise<Int>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  tags: () => Promise<String[]>;
  isPublished: () => Promise<Boolean>;
  isPublic: () => Promise<Boolean>;
  category: () => Promise<Category>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface VideoPreviousValuesSubscription
  extends Promise<AsyncIterator<VideoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  videoURL: () => Promise<AsyncIterator<String>>;
  thumbURL: () => Promise<AsyncIterator<String>>;
  posterURL: () => Promise<AsyncIterator<String>>;
  previewURL: () => Promise<AsyncIterator<String>>;
  duration: () => Promise<AsyncIterator<Int>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  tags: () => Promise<AsyncIterator<String[]>>;
  isPublished: () => Promise<AsyncIterator<Boolean>>;
  isPublic: () => Promise<AsyncIterator<Boolean>>;
  category: () => Promise<AsyncIterator<Category>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ViewEdge {
  node: View;
  cursor: String;
}

export interface ViewEdgePromise extends Promise<ViewEdge>, Fragmentable {
  node: <T = ViewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ViewEdgeSubscription
  extends Promise<AsyncIterator<ViewEdge>>,
    Fragmentable {
  node: <T = ViewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  googleID: String;
  email: String;
  name: String;
  image: String;
  googlePhotoAT?: String;
  googlePhotoRT?: String;
  role: Role;
  createdAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  googleID: () => Promise<String>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  image: () => Promise<String>;
  googlePhotoAT: () => Promise<String>;
  googlePhotoRT: () => Promise<String>;
  videos: <T = FragmentableArray<Video>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<Role>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  googleID: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  googlePhotoAT: () => Promise<AsyncIterator<String>>;
  googlePhotoRT: () => Promise<AsyncIterator<String>>;
  videos: <T = Promise<AsyncIterator<VideoSubscription>>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  role: () => Promise<AsyncIterator<Role>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface AggregateVideo {
  count: Int;
}

export interface AggregateVideoPromise
  extends Promise<AggregateVideo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVideoSubscription
  extends Promise<AsyncIterator<AggregateVideo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VideoConnection {
  pageInfo: PageInfo;
  edges: VideoEdge[];
}

export interface VideoConnectionPromise
  extends Promise<VideoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VideoEdge>>() => T;
  aggregate: <T = AggregateVideoPromise>() => T;
}

export interface VideoConnectionSubscription
  extends Promise<AsyncIterator<VideoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VideoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVideoSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  googleID: String;
  email: String;
  name: String;
  image: String;
  googlePhotoAT?: String;
  googlePhotoRT?: String;
  role: Role;
  createdAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  googleID: () => Promise<String>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  image: () => Promise<String>;
  googlePhotoAT: () => Promise<String>;
  googlePhotoRT: () => Promise<String>;
  role: () => Promise<Role>;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  googleID: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  googlePhotoAT: () => Promise<AsyncIterator<String>>;
  googlePhotoRT: () => Promise<AsyncIterator<String>>;
  role: () => Promise<AsyncIterator<Role>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface VideoSubscriptionPayload {
  mutation: MutationType;
  node: Video;
  updatedFields: String[];
  previousValues: VideoPreviousValues;
}

export interface VideoSubscriptionPayloadPromise
  extends Promise<VideoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VideoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VideoPreviousValuesPromise>() => T;
}

export interface VideoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VideoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VideoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VideoPreviousValuesSubscription>() => T;
}

export interface View {
  id: ID_Output;
  createdAt: DateTimeOutput;
}

export interface ViewPromise extends Promise<View>, Fragmentable {
  id: () => Promise<ID_Output>;
  video: <T = VideoPromise>() => T;
  user: <T = UserPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
}

export interface ViewSubscription
  extends Promise<AsyncIterator<View>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  video: <T = VideoSubscription>() => T;
  user: <T = UserSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ViewSubscriptionPayload {
  mutation: MutationType;
  node: View;
  updatedFields: String[];
  previousValues: ViewPreviousValues;
}

export interface ViewSubscriptionPayloadPromise
  extends Promise<ViewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ViewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ViewPreviousValuesPromise>() => T;
}

export interface ViewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ViewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ViewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ViewPreviousValuesSubscription>() => T;
}

export interface VideoEdge {
  node: Video;
  cursor: String;
}

export interface VideoEdgePromise extends Promise<VideoEdge>, Fragmentable {
  node: <T = VideoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VideoEdgeSubscription
  extends Promise<AsyncIterator<VideoEdge>>,
    Fragmentable {
  node: <T = VideoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ViewConnection {
  pageInfo: PageInfo;
  edges: ViewEdge[];
}

export interface ViewConnectionPromise
  extends Promise<ViewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ViewEdge>>() => T;
  aggregate: <T = AggregateViewPromise>() => T;
}

export interface ViewConnectionSubscription
  extends Promise<AsyncIterator<ViewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ViewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateViewSubscription>() => T;
}

export interface AggregateView {
  count: Int;
}

export interface AggregateViewPromise
  extends Promise<AggregateView>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateViewSubscription
  extends Promise<AsyncIterator<AggregateView>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Category",
    embedded: false
  },
  {
    name: "Role",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  },
  {
    name: "Video",
    embedded: false
  },
  {
    name: "View",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
